# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2024-09-18T10:03:17+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Dict, List, Optional, Union

from pydantic import AnyUrl, AwareDatetime, ConfigDict, Field, RootModel

from .base_model import BaseModelSdk


class ApiKeyCredentials(BaseModelSdk):
    api_key: Annotated[
        str, Field(description='API key for the integration', title='Api Key')
    ]


class BasicAuthCredentials(BaseModelSdk):
    username: Annotated[
        str,
        Field(description='Basic auth username for the integration', title='Username'),
    ]
    password: Annotated[
        str,
        Field(description='Basic auth password for the integration', title='Password'),
    ]


class BlocklistAddIPsRequest(BaseModelSdk):
    model_config = ConfigDict(
        extra='forbid',
    )
    ips: Annotated[List[str], Field(description='List of IPs or networks', title='Ips')]
    expiration: Annotated[
        Optional[AwareDatetime],
        Field(description='Expiration date', title='Expiration'),
    ] = None


class BlocklistCreateRequest(BaseModelSdk):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Annotated[
        str,
        Field(
            description='Blocklist name, must be unique within the organization',
            max_length=200,
            min_length=1,
            title='Name',
        ),
    ]
    label: Annotated[
        Optional[str],
        Field(
            description='Blocklist human readable name (Default: name)', title='Label'
        ),
    ] = None
    description: Annotated[
        str,
        Field(description='Blocklist description', min_length=1, title='Description'),
    ]
    references: Annotated[
        Optional[List[str]],
        Field(
            description="Useful references on the list's origins", title='References'
        ),
    ] = []
    tags: Annotated[
        Optional[List[str]], Field(description='Classification tags', title='Tags')
    ] = []
    from_cti_query: Annotated[
        Optional[str],
        Field(
            description='CTI query (doc link available soon)', title='From Cti Query'
        ),
    ] = None
    since: Annotated[
        Optional[str],
        Field(
            description='Since duration for the CTI query (5m, 2h, 7d). Max is 30 days',
            title='Since',
        ),
    ] = None


class BlocklistDeleteIPsRequest(BaseModelSdk):
    model_config = ConfigDict(
        extra='forbid',
    )
    ips: Annotated[List[str], Field(description='List of IPs or networks', title='Ips')]


class BlocklistIncludeFilters(Enum):
    PUBLIC = 'public'
    PRIVATE = 'private'
    SHARED = 'shared'
    ALL = 'all'


class BlocklistSources(Enum):
    CROWDSEC = 'crowdsec'
    THIRD_PARTY = 'third_party'
    CUSTOM = 'custom'


class BlocklistSubscription(BaseModelSdk):
    id: Annotated[str, Field(title='Id')]
    remediation: Annotated[Optional[str], Field(title='Remediation')] = None
    name: Annotated[str, Field(title='Name')]
    label: Annotated[str, Field(title='Label')]


class BlocklistSubscriptionResponse(BaseModelSdk):
    updated: Annotated[
        Optional[List[str]],
        Field(
            description='List of updated blocklist ids',
            examples=['5f9d88b9e5c4f5b9a3d3e8b1'],
            title='Updated',
        ),
    ] = None
    errors: Annotated[
        Optional[List[Dict[str, str]]],
        Field(
            description='List of errors if any',
            examples=[{'5f9d88b9e5c4f5b9a3d3e8b1': 'error message'}],
            title='Errors',
        ),
    ] = None


class BlocklistUpdateRequest(BaseModelSdk):
    model_config = ConfigDict(
        extra='forbid',
    )
    label: Annotated[
        Optional[str], Field(description='Blocklist human readable name', title='Label')
    ] = None
    description: Annotated[
        Optional[str], Field(description='Blocklist description', title='Description')
    ] = None
    references: Annotated[
        Optional[List[str]],
        Field(description='Blocklist references', title='References'),
    ] = None
    tags: Annotated[
        Optional[List[str]], Field(description='Blocklist tags', title='Tags')
    ] = None
    from_cti_query: Annotated[
        Optional[str],
        Field(
            description='CTI query (doc link available soon)', title='From Cti Query'
        ),
    ] = None
    since: Annotated[
        Optional[str],
        Field(
            description='Since duration for the CTI query (eg. 5m, 2h, 7d). Max is 30 days',
            title='Since',
        ),
    ] = None


class BlocklistUsageStats(BaseModelSdk):
    model_config = ConfigDict(
        extra='allow',
    )
    engines_subscribed_directly: Annotated[
        Optional[int], Field(title='Engines Subscribed Directly')
    ] = 0
    engines_subscribed_through_org: Annotated[
        Optional[int], Field(title='Engines Subscribed Through Org')
    ] = 0
    engines_subscribed_through_tag: Annotated[
        Optional[int], Field(title='Engines Subscribed Through Tag')
    ] = 0
    total_subscribed_engines: Annotated[
        Optional[int], Field(title='Total Subscribed Engines')
    ] = 0
    updated_at: Annotated[Optional[AwareDatetime], Field(title='Updated At')] = None


class BodyUploadBlocklistContent(BaseModelSdk):
    file: Annotated[
        bytes, Field(description='Blocklist file in txt format', title='File')
    ]


class CtiAs(BaseModelSdk):
    model_config = ConfigDict(
        extra='allow',
    )
    as_num: Annotated[str, Field(title='As Num')]
    as_name: Annotated[str, Field(title='As Name')]
    total_ips: Annotated[int, Field(title='Total Ips')]


class CtiBehavior(BaseModelSdk):
    model_config = ConfigDict(
        extra='allow',
    )
    name: Annotated[str, Field(title='Name')]
    label: Annotated[str, Field(title='Label')]
    description: Annotated[str, Field(title='Description')]
    references: Annotated[List[str], Field(title='References')]
    total_ips: Annotated[int, Field(title='Total Ips')]


class CtiCategory(BaseModelSdk):
    model_config = ConfigDict(
        extra='allow',
    )
    name: Annotated[str, Field(title='Name')]
    label: Annotated[str, Field(title='Label')]
    description: Annotated[str, Field(title='Description')]
    total_ips: Annotated[int, Field(title='Total Ips')]


class CtiCountry(BaseModelSdk):
    model_config = ConfigDict(
        extra='allow',
    )
    country_short: Annotated[str, Field(title='Country Short')]
    total_ips: Annotated[int, Field(title='Total Ips')]


class CtiIp(BaseModelSdk):
    model_config = ConfigDict(
        extra='allow',
    )
    ip: Annotated[str, Field(title='Ip')]
    total_signals_1m: Annotated[int, Field(title='Total Signals 1M')]
    reputation: Annotated[Optional[str], Field(title='Reputation')] = 'unknown'


class CtiScenario(BaseModelSdk):
    model_config = ConfigDict(
        extra='allow',
    )
    name: Annotated[str, Field(title='Name')]
    label: Annotated[str, Field(title='Label')]
    description: Annotated[str, Field(title='Description')]
    references: Annotated[List[str], Field(title='References')]
    total_ips: Annotated[int, Field(title='Total Ips')]


class EntityType(Enum):
    ORG = 'org'
    TAG = 'tag'
    ENGINE = 'engine'
    FIREWALL_INTEGRATION = 'firewall_integration'
    REMEDIATION_COMPONENT_INTEGRATION = 'remediation_component_integration'


class InfoResponse(BaseModelSdk):
    organization_id: Annotated[
        str, Field(description='The organization ID', title='Organization Id')
    ]
    subscription_type: Annotated[
        str,
        Field(
            description='The organization subscription type', title='Subscription Type'
        ),
    ]
    api_key_name: Annotated[
        str, Field(description='The API key name that is used', title='Api Key Name')
    ]


class IntegrationType(Enum):
    FIREWALL_INTEGRATION = 'firewall_integration'
    REMEDIATION_COMPONENT_INTEGRATION = 'remediation_component_integration'


class Links(BaseModelSdk):
    first: Annotated[
        Optional[str], Field(examples=['/api/v1/users?limit=1&offset1'], title='First')
    ] = None
    last: Annotated[
        Optional[str], Field(examples=['/api/v1/users?limit=1&offset1'], title='Last')
    ] = None
    self: Annotated[
        Optional[str], Field(examples=['/api/v1/users?limit=1&offset1'], title='Self')
    ] = None
    next: Annotated[
        Optional[str], Field(examples=['/api/v1/users?limit=1&offset1'], title='Next')
    ] = None
    prev: Annotated[
        Optional[str], Field(examples=['/api/v1/users?limit=1&offset1'], title='Prev')
    ] = None


class OutputFormat(Enum):
    PLAIN_TEXT = 'plain_text'
    F5 = 'f5'
    REMEDIATION_COMPONENT = 'remediation_component'
    FORTIGATE = 'fortigate'
    PALOALTO = 'paloalto'
    CHECKPOINT = 'checkpoint'
    CISCO = 'cisco'


class Total(RootModel[int]):
    root: Annotated[int, Field(ge=0, title='Total')]


class Page(RootModel[int]):
    root: Annotated[int, Field(ge=1, title='Page')]


class Size(RootModel[int]):
    root: Annotated[int, Field(ge=1, title='Size')]


class Pages(RootModel[int]):
    root: Annotated[int, Field(ge=0, title='Pages')]


class Permission(Enum):
    READ = 'read'
    WRITE = 'write'


class PricingTiers(Enum):
    FREE = 'free'
    PREMIUM = 'premium'
    PLATINUM = 'platinum'


class Share(BaseModelSdk):
    organization_id: Annotated[str, Field(title='Organization Id')]
    permission: Permission


class Stats(BaseModelSdk):
    count: Annotated[
        int,
        Field(
            description='Number of total blocklists items the integration will pull',
            title='Count',
        ),
    ]


class ValidationError(BaseModelSdk):
    loc: Annotated[List[Union[str, int]], Field(title='Location')]
    msg: Annotated[str, Field(title='Message')]
    type: Annotated[str, Field(title='Error Type')]


class HubType(Enum):
    PARSERS = 'parsers'
    POSTOVERFLOWS = 'postoverflows'
    SCENARIOS = 'scenarios'
    COLLECTIONS = 'collections'
    CONTEXTS = 'contexts'
    APPSEC_CONFIGS = 'appsec-configs'
    APPSEC_RULES = 'appsec-rules'


class BlocklistsGetBlocklistsQueryParameters(BaseModelSdk):
    page: Annotated[
        Optional[int], Field(description='Page number', ge=1, title='Page')
    ] = 1
    page_size: Annotated[
        Optional[int], Field(description='Page size', le=1000, title='Page Size')
    ] = 100
    subscribed_only: Annotated[
        Optional[bool],
        Field(
            description='Fetch only blocklists subscribed by your organization, engines or tags',
            title='Subscribed Only',
        ),
    ] = False
    exclude_subscribed: Annotated[
        Optional[bool],
        Field(description='Exclude subscribed blocklists', title='Exclude Subscribed'),
    ] = False
    include_filter: Annotated[
        Optional[List[BlocklistIncludeFilters]],
        Field(
            description='Include blocklists with the specified filters',
            title='Include Filter',
        ),
    ] = ['private', 'shared']
    size: Annotated[
        Optional[int], Field(description='Page size', ge=1, le=100, title='Size')
    ] = 50


class BlocklistsGetBlocklistPathParameters(BaseModelSdk):
    blocklist_id: Annotated[
        str, Field(examples=['5f9d88b9e5c4f5b9a3d3e8b1'], title='Blocklist Id')
    ]


class BlocklistsUpdateBlocklistPathParameters(BaseModelSdk):
    blocklist_id: Annotated[
        str, Field(examples=['5f9d88b9e5c4f5b9a3d3e8b1'], title='Blocklist Id')
    ]


class BlocklistsDeleteBlocklistQueryParameters(BaseModelSdk):
    force: Annotated[
        Optional[bool],
        Field(
            description='Force delete the blocklist if it is shared or subscribed',
            title='Force',
        ),
    ] = False


class BlocklistsDeleteBlocklistPathParameters(BaseModelSdk):
    blocklist_id: Annotated[
        str, Field(examples=['5f9d88b9e5c4f5b9a3d3e8b1'], title='Blocklist Id')
    ]


class BlocklistsUploadBlocklistContentQueryParameters(BaseModelSdk):
    expiration: Annotated[
        Optional[AwareDatetime],
        Field(description='Blocklist expiration', title='Expiration'),
    ] = None
    ignore_invalid_ips: Annotated[
        Optional[bool],
        Field(description='Ignore invalid IPs', title='Ignore Invalid Ips'),
    ] = False


class BlocklistsUploadBlocklistContentPathParameters(BaseModelSdk):
    blocklist_id: Annotated[
        str, Field(examples=['5f9d88b9e5c4f5b9a3d3e8b1'], title='Blocklist Id')
    ]


class BlocklistsAddIpsToBlocklistPathParameters(BaseModelSdk):
    blocklist_id: Annotated[
        str, Field(examples=['5f9d88b9e5c4f5b9a3d3e8b1'], title='Blocklist Id')
    ]


class BlocklistsDeleteIpsFromBlocklistPathParameters(BaseModelSdk):
    blocklist_id: Annotated[
        str, Field(examples=['5f9d88b9e5c4f5b9a3d3e8b1'], title='Blocklist Id')
    ]


class BlocklistsDownloadBlocklistContentPathParameters(BaseModelSdk):
    blocklist_id: Annotated[
        str, Field(examples=['5f9d88b9e5c4f5b9a3d3e8b1'], title='Blocklist Id')
    ]


class BlocklistsDownloadBlocklistContentHeadersParameters(BaseModelSdk):
    if_modified_since: Annotated[
        Optional[str],
        Field(
            alias='if-modified-since',
            description='If_Modified_Since cache control header',
            title='If-Modified-Since',
        ),
    ] = None
    if_none_match: Annotated[
        Optional[str],
        Field(
            alias='if-none-match',
            description='If_None_Match cache control header',
            title='If-None-Match',
        ),
    ] = None


class BlocklistsSubscribeBlocklistPathParameters(BaseModelSdk):
    blocklist_id: Annotated[
        str, Field(examples=['5f9d88b9e5c4f5b9a3d3e8b1'], title='Blocklist Id')
    ]


class BlocklistsGetBlocklistSubscribersPathParameters(BaseModelSdk):
    blocklist_id: Annotated[
        str, Field(examples=['5f9d88b9e5c4f5b9a3d3e8b1'], title='Blocklist Id')
    ]


class BlocklistsUnsubscribeBlocklistPathParameters(BaseModelSdk):
    blocklist_id: Annotated[
        str, Field(examples=['5f9d88b9e5c4f5b9a3d3e8b1'], title='Blocklist Id')
    ]
    entity_id: Annotated[str, Field(title='Entity Id')]


class BlocklistsShareBlocklistPathParameters(BaseModelSdk):
    blocklist_id: Annotated[
        str, Field(examples=['5f9d88b9e5c4f5b9a3d3e8b1'], title='Blocklist Id')
    ]


class BlocklistsUnshareBlocklistPathParameters(BaseModelSdk):
    blocklist_id: Annotated[
        str, Field(examples=['5f9d88b9e5c4f5b9a3d3e8b1'], title='Blocklist Id')
    ]
    unshare_organization_id: Annotated[str, Field(title='Unshare Organization Id')]


class IntegrationsGetIntegrationsQueryParameters(BaseModelSdk):
    page: Annotated[
        Optional[int], Field(description='Page number', ge=1, title='Page')
    ] = 1
    size: Annotated[
        Optional[int], Field(description='Page size', ge=1, le=100, title='Size')
    ] = 50


class IntegrationsGetIntegrationPathParameters(BaseModelSdk):
    integration_id: Annotated[str, Field(title='Integration Id')]


class IntegrationsUpdateIntegrationPathParameters(BaseModelSdk):
    integration_id: Annotated[str, Field(title='Integration Id')]


class IntegrationsDeleteIntegrationPathParameters(BaseModelSdk):
    integration_id: Annotated[str, Field(title='Integration Id')]


class IntegrationsHeadIntegrationContentPathParameters(BaseModelSdk):
    integration_id: Annotated[
        str, Field(examples=['5f9d88b9e5c4f5b9a3d3e8b1'], title='Integration Id')
    ]


class PageSize(RootModel[int]):
    root: Annotated[
        int,
        Field(
            description='Maximum number of items to return, 0 means no limit (default), should be greater than 10000',
            ge=10000,
            title='Page Size',
        ),
    ]


class IntegrationsGetIntegrationContentQueryParameters(BaseModelSdk):
    page: Annotated[
        Optional[int], Field(description='Page number to return', ge=1, title='Page')
    ] = 1
    page_size: Annotated[
        Optional[PageSize],
        Field(
            description='Maximum number of items to return, 0 means no limit (default), should be greater than 10000',
            title='Page Size',
        ),
    ] = None


class IntegrationsGetIntegrationContentPathParameters(BaseModelSdk):
    integration_id: Annotated[
        str, Field(examples=['5f9d88b9e5c4f5b9a3d3e8b1'], title='Integration Id')
    ]


class IntegrationsGetIntegrationContentStreamQueryParameters(BaseModelSdk):
    startup: Annotated[
        Optional[bool],
        Field(
            description="Set to true if it's the first run to fetch all the content, otherwise only changes since the last pull.",
            title='Startup',
        ),
    ] = False


class IntegrationsGetIntegrationContentStreamPathParameters(BaseModelSdk):
    integration_id: Annotated[
        str, Field(examples=['5f9d88b9e5c4f5b9a3d3e8b1'], title='Integration Id')
    ]


class HubGetIndexQueryParameters(BaseModelSdk):
    with_content: Annotated[
        Optional[bool],
        Field(description='Include content in the index', title='With Content'),
    ] = False


class HubGetIndexPathParameters(BaseModelSdk):
    branch: Annotated[str, Field(title='Branch')]
    tenant: Annotated[str, Field(title='Tenant')]


class HubHeadIndexQueryParameters(BaseModelSdk):
    with_content: Annotated[
        Optional[bool],
        Field(description='Include content in the index', title='With Content'),
    ] = False


class HubHeadIndexPathParameters(BaseModelSdk):
    branch: Annotated[str, Field(title='Branch')]
    tenant: Annotated[str, Field(title='Tenant')]


class HubGetItemContentPathParameters(BaseModelSdk):
    item_path: Annotated[str, Field(title='Item Path')]
    branch: Annotated[str, Field(title='Branch')]
    tenant: Annotated[str, Field(title='Tenant')]


class HubHeadItemContentPathParameters(BaseModelSdk):
    item_path: Annotated[str, Field(title='Item Path')]
    branch: Annotated[str, Field(title='Branch')]
    tenant: Annotated[str, Field(title='Tenant')]


class BlocklistContentStats(BaseModelSdk):
    model_config = ConfigDict(
        extra='allow',
    )
    total_seen: Annotated[Optional[int], Field(title='Total Seen')] = 0
    total_fire: Annotated[Optional[int], Field(title='Total Fire')] = 0
    total_seen_1m: Annotated[Optional[int], Field(title='Total Seen 1M')] = 0
    total_in_other_lists: Annotated[
        Optional[int], Field(title='Total In Other Lists')
    ] = 0
    total_false_positive: Annotated[
        Optional[int], Field(title='Total False Positive')
    ] = 0
    false_positive_removed_by_crowdsec: Annotated[
        Optional[int], Field(title='False Positive Removed By Crowdsec')
    ] = 0
    most_present_behaviors: Annotated[
        Optional[List[CtiBehavior]], Field(title='Most Present Behaviors')
    ] = []
    most_present_categories: Annotated[
        Optional[List[CtiCategory]], Field(title='Most Present Categories')
    ] = []
    most_present_scenarios: Annotated[
        Optional[List[CtiScenario]], Field(title='Most Present Scenarios')
    ] = []
    top_as: Annotated[Optional[List[CtiAs]], Field(title='Top As')] = []
    top_attacking_countries: Annotated[
        Optional[List[CtiCountry]], Field(title='Top Attacking Countries')
    ] = []
    top_ips: Annotated[Optional[List[CtiIp]], Field(title='Top Ips')] = []
    updated_at: Annotated[Optional[AwareDatetime], Field(title='Updated At')] = None


class BlocklistShareRequest(BaseModelSdk):
    model_config = ConfigDict(
        extra='forbid',
    )
    organizations: Annotated[
        List[Share],
        Field(
            description='List of organizations to share the blocklist',
            title='Organizations',
        ),
    ]


class BlocklistStats(BaseModelSdk):
    model_config = ConfigDict(
        extra='allow',
    )
    content_stats: Annotated[Optional[BlocklistContentStats], Field()] = {
        'total_seen': 0,
        'total_fire': 0,
        'total_seen_1m': 0,
        'total_in_other_lists': 0,
        'total_false_positive': 0,
        'false_positive_removed_by_crowdsec': 0,
        'most_present_behaviors': [],
        'most_present_categories': [],
        'most_present_scenarios': [],
        'top_as': [],
        'top_attacking_countries': [],
        'top_ips': [],
    }
    usage_stats: Optional[BlocklistUsageStats] = {
        'engines_subscribed_directly': 0,
        'engines_subscribed_through_org': 0,
        'engines_subscribed_through_tag': 0,
        'total_subscribed_engines': 0,
    }
    addition_2days: Annotated[Optional[int], Field(title='Addition 2Days')] = 0
    addition_month: Annotated[Optional[int], Field(title='Addition Month')] = 0
    suppression_2days: Annotated[Optional[int], Field(title='Suppression 2Days')] = 0
    suppression_month: Annotated[Optional[int], Field(title='Suppression Month')] = 0
    change_2days_percentage: Annotated[
        Optional[float], Field(title='Change 2Days Percentage')
    ] = 0.0
    change_month_percentage: Annotated[
        Optional[float], Field(title='Change Month Percentage')
    ] = 0.0
    count: Annotated[Optional[int], Field(title='Count')] = 0
    updated_at: Annotated[Optional[AwareDatetime], Field(title='Updated At')] = None


class BlocklistSubscriberEntity(BaseModelSdk):
    id: Annotated[str, Field(description='Subscriber entity id', title='Id')]
    entity_type: EntityType
    remediation: Annotated[str, Field(description='Remediation', title='Remediation')]


class BlocklistSubscribersResponse(BaseModelSdk):
    subscribers: Annotated[
        List[BlocklistSubscriberEntity],
        Field(description='List of subscribers', title='Subscribers'),
    ]


class BlocklistSubscriptionRequest(BaseModelSdk):
    model_config = ConfigDict(
        extra='forbid',
    )
    ids: Annotated[
        Optional[List[str]],
        Field(description='List of subscriber entity id', title='Ids'),
    ] = None
    entity_type: EntityType
    remediation: Annotated[
        Optional[str], Field(description='Remediation', title='Remediation')
    ] = None


class HTTPValidationError(BaseModelSdk):
    detail: Annotated[Optional[List[ValidationError]], Field(title='Detail')] = None


class IntegrationCreateRequest(BaseModelSdk):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Annotated[
        str, Field(description='Name of the integration', min_length=1, title='Name')
    ]
    description: Annotated[
        Optional[str],
        Field(
            description='Description of the integration',
            min_length=1,
            title='Description',
        ),
    ] = None
    entity_type: Annotated[
        IntegrationType, Field(description='Type of the integration')
    ]
    output_format: Annotated[
        OutputFormat, Field(description='Output format of the integration')
    ]


class IntegrationCreateResponse(BaseModelSdk):
    id: Annotated[str, Field(description='ID of the integration', title='Id')]
    name: Annotated[
        str,
        Field(
            description='Name of the integration. Should be unique within the organization',
            title='Name',
        ),
    ]
    organization_id: Annotated[
        str, Field(description='ID of the owner organization', title='Organization Id')
    ]
    description: Annotated[
        Optional[str],
        Field(description='Description of the integration', title='Description'),
    ] = None
    created_at: Annotated[
        AwareDatetime,
        Field(description='Time the integration was created', title='Created At'),
    ]
    updated_at: Annotated[
        AwareDatetime,
        Field(description='Last time the integration was updated', title='Updated At'),
    ]
    entity_type: Annotated[
        IntegrationType, Field(description='Type of the integration')
    ]
    output_format: Annotated[
        OutputFormat, Field(description='Output format of the integration')
    ]
    last_pull: Annotated[
        Optional[AwareDatetime],
        Field(
            description='Last time the integration pulled blocklists', title='Last Pull'
        ),
    ] = None
    blocklists: Annotated[
        List[BlocklistSubscription],
        Field(
            description='Blocklists that are subscribed by the integration',
            title='Blocklists',
        ),
    ]
    endpoint: Annotated[
        AnyUrl,
        Field(
            description="Url that should be used by the firewall or the remediation component to fetch the integration's content",
            title='Endpoint',
        ),
    ]
    stats: Annotated[Optional[Stats], Field(description='Stats of the integration')] = {
        'count': 0
    }
    credentials: Annotated[
        Union[ApiKeyCredentials, BasicAuthCredentials],
        Field(
            description='Credentials that were generated for the integration',
            title='Credentials',
        ),
    ]


class IntegrationGetResponse(BaseModelSdk):
    id: Annotated[str, Field(description='ID of the integration', title='Id')]
    name: Annotated[
        str,
        Field(
            description='Name of the integration. Should be unique within the organization',
            title='Name',
        ),
    ]
    organization_id: Annotated[
        str, Field(description='ID of the owner organization', title='Organization Id')
    ]
    description: Annotated[
        Optional[str],
        Field(description='Description of the integration', title='Description'),
    ] = None
    created_at: Annotated[
        AwareDatetime,
        Field(description='Time the integration was created', title='Created At'),
    ]
    updated_at: Annotated[
        AwareDatetime,
        Field(description='Last time the integration was updated', title='Updated At'),
    ]
    entity_type: Annotated[
        IntegrationType, Field(description='Type of the integration')
    ]
    output_format: Annotated[
        OutputFormat, Field(description='Output format of the integration')
    ]
    last_pull: Annotated[
        Optional[AwareDatetime],
        Field(
            description='Last time the integration pulled blocklists', title='Last Pull'
        ),
    ] = None
    blocklists: Annotated[
        List[BlocklistSubscription],
        Field(
            description='Blocklists that are subscribed by the integration',
            title='Blocklists',
        ),
    ]
    endpoint: Annotated[
        AnyUrl,
        Field(
            description="Url that should be used by the firewall or the remediation component to fetch the integration's content",
            title='Endpoint',
        ),
    ]
    stats: Annotated[Optional[Stats], Field(description='Stats of the integration')] = {
        'count': 0
    }


class IntegrationUpdateRequest(BaseModelSdk):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Annotated[
        Optional[str], Field(description='New name', min_length=1, title='Name')
    ] = None
    description: Annotated[
        Optional[str],
        Field(description='New description', min_length=1, title='Description'),
    ] = None
    output_format: Annotated[
        Optional[OutputFormat], Field(description='New output format')
    ] = None
    regenerate_credentials: Annotated[
        Optional[bool],
        Field(
            description='Regenerate credentials for the integration',
            title='Regenerate Credentials',
        ),
    ] = None


class IntegrationUpdateResponse(BaseModelSdk):
    id: Annotated[str, Field(description='ID of the integration', title='Id')]
    name: Annotated[
        str,
        Field(
            description='Name of the integration. Should be unique within the organization',
            title='Name',
        ),
    ]
    organization_id: Annotated[
        str, Field(description='ID of the owner organization', title='Organization Id')
    ]
    description: Annotated[
        Optional[str],
        Field(description='Description of the integration', title='Description'),
    ] = None
    created_at: Annotated[
        AwareDatetime,
        Field(description='Time the integration was created', title='Created At'),
    ]
    updated_at: Annotated[
        AwareDatetime,
        Field(description='Last time the integration was updated', title='Updated At'),
    ]
    entity_type: Annotated[
        IntegrationType, Field(description='Type of the integration')
    ]
    output_format: Annotated[
        OutputFormat, Field(description='Output format of the integration')
    ]
    last_pull: Annotated[
        Optional[AwareDatetime],
        Field(
            description='Last time the integration pulled blocklists', title='Last Pull'
        ),
    ] = None
    blocklists: Annotated[
        List[BlocklistSubscription],
        Field(
            description='Blocklists that are subscribed by the integration',
            title='Blocklists',
        ),
    ]
    endpoint: Annotated[
        AnyUrl,
        Field(
            description="Url that should be used by the firewall or the remediation component to fetch the integration's content",
            title='Endpoint',
        ),
    ]
    stats: Annotated[Optional[Stats], Field(description='Stats of the integration')] = {
        'count': 0
    }
    credentials: Annotated[
        Optional[Union[ApiKeyCredentials, BasicAuthCredentials]],
        Field(description='Credentials for the integration', title='Credentials'),
    ] = None


class PageIntegrationGetResponse(BaseModelSdk):
    items: Annotated[List[IntegrationGetResponse], Field(title='Items')]
    total: Annotated[Optional[Total], Field(title='Total')] = None
    page: Annotated[Optional[Page], Field(title='Page')] = None
    size: Annotated[Optional[Size], Field(title='Size')] = None
    pages: Annotated[Optional[Pages], Field(title='Pages')] = None
    links: Links


class BlocklistCreateResponse(BaseModelSdk):
    id: Annotated[str, Field(description='Blocklist id', title='Id')]
    created_at: Annotated[
        AwareDatetime, Field(description='Blocklist creation date', title='Created At')
    ]
    updated_at: Annotated[
        AwareDatetime, Field(description='Blocklist update date', title='Updated At')
    ]
    name: Annotated[
        str,
        Field(
            description='Blocklist name, unique within the organization', title='Name'
        ),
    ]
    label: Annotated[
        str, Field(description='Blocklist human readable name', title='Label')
    ]
    description: Annotated[
        str, Field(description='Blocklist description', title='Description')
    ]
    references: Annotated[
        List[str], Field(description='Blocklist references', title='References')
    ]
    is_private: Annotated[
        bool,
        Field(
            description='Private blocklist if True or public if False',
            title='Is Private',
        ),
    ]
    tags: Annotated[List[str], Field(description='Classification tags', title='Tags')]
    pricing_tier: Annotated[
        PricingTiers, Field(description='Pricing tier for Crowdsec blocklists only')
    ]
    source: Annotated[BlocklistSources, Field(description='Blocklist source')]
    stats: Annotated[BlocklistStats, Field(description='Blocklist stats')]
    from_cti_query: Annotated[
        Optional[str],
        Field(
            description='CTI query from which the blocklist was created',
            title='From Cti Query',
        ),
    ] = None
    since: Annotated[
        Optional[str],
        Field(
            description='Since duration for the CTI query (eg. 5m, 2h, 7d). Max is 30 days',
            title='Since',
        ),
    ] = None
    shared_with: Annotated[
        List[Share],
        Field(description='List of organizations shared with', title='Shared With'),
    ]
    organization_id: Annotated[
        Optional[str],
        Field(
            description="Blocklists owner's organization id", title='Organization Id'
        ),
    ] = None
    subscribers: Annotated[
        List[BlocklistSubscriberEntity],
        Field(
            description='List of subscribers to the blocklist. Only subscribers belonging to your organization are returned',
            title='Subscribers',
        ),
    ]


class BlocklistGetResponse(BaseModelSdk):
    id: Annotated[str, Field(description='Blocklist id', title='Id')]
    created_at: Annotated[
        AwareDatetime, Field(description='Blocklist creation date', title='Created At')
    ]
    updated_at: Annotated[
        AwareDatetime, Field(description='Blocklist update date', title='Updated At')
    ]
    name: Annotated[
        str,
        Field(
            description='Blocklist name, unique within the organization', title='Name'
        ),
    ]
    label: Annotated[
        str, Field(description='Blocklist human readable name', title='Label')
    ]
    description: Annotated[
        str, Field(description='Blocklist description', title='Description')
    ]
    references: Annotated[
        List[str], Field(description='Blocklist references', title='References')
    ]
    is_private: Annotated[
        bool,
        Field(
            description='Private blocklist if True or public if False',
            title='Is Private',
        ),
    ]
    tags: Annotated[List[str], Field(description='Classification tags', title='Tags')]
    pricing_tier: Annotated[
        PricingTiers, Field(description='Pricing tier for Crowdsec blocklists only')
    ]
    source: Annotated[BlocklistSources, Field(description='Blocklist source')]
    stats: Annotated[BlocklistStats, Field(description='Blocklist stats')]
    from_cti_query: Annotated[
        Optional[str],
        Field(
            description='CTI query from which the blocklist was created',
            title='From Cti Query',
        ),
    ] = None
    since: Annotated[
        Optional[str],
        Field(
            description='Since duration for the CTI query (eg. 5m, 2h, 7d). Max is 30 days',
            title='Since',
        ),
    ] = None
    shared_with: Annotated[
        List[Share],
        Field(description='List of organizations shared with', title='Shared With'),
    ]
    organization_id: Annotated[
        Optional[str],
        Field(
            description="Blocklists owner's organization id", title='Organization Id'
        ),
    ] = None
    subscribers: Annotated[
        List[BlocklistSubscriberEntity],
        Field(
            description='List of subscribers to the blocklist. Only subscribers belonging to your organization are returned',
            title='Subscribers',
        ),
    ]


class BlocklistResponse(BaseModelSdk):
    id: Annotated[str, Field(description='Blocklist id', title='Id')]
    created_at: Annotated[
        AwareDatetime, Field(description='Blocklist creation date', title='Created At')
    ]
    updated_at: Annotated[
        AwareDatetime, Field(description='Blocklist update date', title='Updated At')
    ]
    name: Annotated[
        str,
        Field(
            description='Blocklist name, unique within the organization', title='Name'
        ),
    ]
    label: Annotated[
        str, Field(description='Blocklist human readable name', title='Label')
    ]
    description: Annotated[
        str, Field(description='Blocklist description', title='Description')
    ]
    references: Annotated[
        List[str], Field(description='Blocklist references', title='References')
    ]
    is_private: Annotated[
        bool,
        Field(
            description='Private blocklist if True or public if False',
            title='Is Private',
        ),
    ]
    tags: Annotated[List[str], Field(description='Classification tags', title='Tags')]
    pricing_tier: Annotated[
        PricingTiers, Field(description='Pricing tier for Crowdsec blocklists only')
    ]
    source: Annotated[BlocklistSources, Field(description='Blocklist source')]
    stats: Annotated[BlocklistStats, Field(description='Blocklist stats')]
    from_cti_query: Annotated[
        Optional[str],
        Field(
            description='CTI query from which the blocklist was created',
            title='From Cti Query',
        ),
    ] = None
    since: Annotated[
        Optional[str],
        Field(
            description='Since duration for the CTI query (eg. 5m, 2h, 7d). Max is 30 days',
            title='Since',
        ),
    ] = None
    shared_with: Annotated[
        List[Share],
        Field(description='List of organizations shared with', title='Shared With'),
    ]
    organization_id: Annotated[
        Optional[str],
        Field(
            description="Blocklists owner's organization id", title='Organization Id'
        ),
    ] = None
    subscribers: Annotated[
        List[BlocklistSubscriberEntity],
        Field(
            description='List of subscribers to the blocklist. Only subscribers belonging to your organization are returned',
            title='Subscribers',
        ),
    ]


class PageBlocklistResponse(BaseModelSdk):
    items: Annotated[List[BlocklistResponse], Field(title='Items')]
    total: Annotated[Optional[Total], Field(title='Total')] = None
    page: Annotated[Optional[Page], Field(title='Page')] = None
    size: Annotated[Optional[Size], Field(title='Size')] = None
    pages: Annotated[Optional[Pages], Field(title='Pages')] = None
    links: Links
